---

- name: check existence of qcow2 image
  stat:
    path: "{{ hetzner_hypervisor_vms_path }}{{ vm.name }}.qcow2"
    get_md5: false
    get_checksum: false
  register: qcow_exists

# Block start create vm
- block:
  - name: create qcow2 file if not exists
    command: "virsh vol-create-as {{ hetzner_hypervisor_default_storage_pool }} {{ vm.name }}.qcow2 {{ vm.size }}G --prealloc-metadata --format qcow2"

  - name: create another tmpdir
    command: mktemp -d
    register: _mktemp

  - name: set target (tmpfs)
    set_fact:
      _bootstrap_target: "{{ _mktemp.stdout }}"

  - name: mount tmpfs
    command: "mount -t tmpfs -o size=2G none {{ _bootstrap_target }}"

  - name: set debian distro url
    set_fact:
      _distro_url: "{{ hetzner_hypervisor_debootstrap_debian_url }}"
    when: vm.distro == 'debian'

  - name: set ubuntu distro url
    set_fact:
      _distro_url: "{{ hetzner_hypervisor_debootstrap_ubuntu_url }}"
    when: vm.distro == 'ubuntu'

  - name: debootstrap
    command: "eatmydata debootstrap {{ vm.release }} {{ _bootstrap_target }} {{ _distro_url }}"
    async: 86400
    poll: 15

  - name: bind mount pseudo filesystems
    shell: "mkdir -p {{ _bootstrap_target }}/{{ item }}; mount -o bind /{{ item }} {{ _bootstrap_target }}/{{ item }}"
    register: _pseudomount
    with_items:
    - proc
    - sys
    - dev
    - dev/pts

  - name: update sources
    shell: "DEBIAN_FRONTEND=noninteractive chroot {{ _bootstrap_target }} apt-get update"

  - name: install eatmydata
    shell: "DEBIAN_FRONTEND=noninteractive chroot {{ _bootstrap_target }} apt-get -y install eatmydata"

  - name: install generic packages
    shell: "DEBIAN_FRONTEND=noninteractive chroot {{ _bootstrap_target }} eatmydata apt-get -y install less vim nano sudo resolvconf ssh grub-pc python xfsprogs"
    async: 86400
    poll: 15

  - name: install debian packages
    shell: "DEBIAN_FRONTEND=noninteractive chroot {{ _bootstrap_target }} eatmydata apt-get -y install locales-all linux-image-amd64 acpid"
    async: 86400
    poll: 15
    when: vm.distro == 'debian'

  - name: install ubuntu packages
    shell: "DEBIAN_FRONTEND=noninteractive chroot {{ _bootstrap_target }} eatmydata apt-get -y install linux-image-virtual acpid"
    async: 86400
    poll: 15
    when: vm.distro == 'ubuntu'

  - name: generate locales
    command: "chroot {{ _bootstrap_target }} locale-gen"
    when: vm.distro == 'ubuntu'

  - name: clean up packages
    command: "chroot {{ _bootstrap_target }} eatmydata apt-get clean"

  - name: umount pseudo filesystems
    command: umount -l {{ _bootstrap_target }}/{{ item }}
    with_items:
    - dev/pts
    - dev
    - proc
    - sys

  - name: connect the qcow device
    command: "qemu-nbd -c /dev/nbd0 {{ hetzner_hypervisor_vms_path }}{{ vm.name }}.qcow2"

  - name: Create BIOS Boot partition (for grub)
    command: sgdisk -n 1:0:+1M -t 1:ef02 /dev/nbd0

  - name: Create boot partition
    command: sgdisk -n 2:0:+1024M -t 2:8200 /dev/nbd0

  - name: Create root partition
    command: sgdisk -n 3:0:0 -t 3:8200 /dev/nbd0

  - name: format boot partition
    filesystem:
      fstype: ext4
      dev: /dev/nbd0p2

  - name: format root partition
    filesystem:
      fstype: xfs
      dev: /dev/nbd0p3

  - name: mount root partition
    command: mount /dev/nbd0p3 /mnt/

  - name: create /mnt/boot directory
    file:
      state: directory
      path: /mnt/boot

  - name: mount boot partition
    command: mount /dev/nbd0p2 /mnt/boot/

  - name: copy data from temp
    shell: cp -a {{ _bootstrap_target }}/* /mnt/

  - name: bind mount pseudo filesystems
    shell: mkdir -p /mnt/{{ item }}; mount -o bind /{{ item }} /mnt/{{ item }}
    with_items:
    - proc
    - sys
    - dev
    - dev/pts

  - name: umount tmpfs
    command: "umount -l {{ _bootstrap_target }}"

  - name: remove tmpfs
    file:
      state: absent
      path: "{{ _bootstrap_target }}"

  - name: get boot Device UUID
    shell: "blkid -s UUID -o value /dev/nbd0p2"
    register: _device_uuid
    changed_when: True

  - name: set boot UUID
    set_fact:
      boot_device_uuid: "{{ _device_uuid.stdout }}"

  - name: get root Device UUID
    shell: "blkid -s UUID -o value /dev/nbd0p3"
    register: _device_uuid
    changed_when: True

  - name: set root UUID
    set_fact:
      root_device_uuid: "{{ _device_uuid.stdout }}"

  - name: add fstab
    template:
      src: fstab.j2
      dest: /mnt/etc/fstab
      owner: root
      group: root
      mode: '0644'

  - name: add interfaces
    template:
      src: guest_interfaces.j2
      dest: /mnt/etc/network/interfaces
      owner: root
      group: root
      mode: '0644'

  - name: add debian_sources.list
    template:
      src: debian_sources.list.j2
      dest: /mnt/etc/apt/sources.list
      owner: root
      group: root
      mode: '0644'
    when: vm.distro == 'debian'

  - name: add ubuntu_sources.list
    template:
      src: ubuntu_sources.list.j2
      dest: /mnt/etc/apt/sources.list
      owner: root
      group: root
      mode: '0644'
    when: vm.distro == 'ubuntu'

  - name: set hostname
    copy:
      content: "{{ vm.name }}"
      dest: /mnt/etc/hostname

  - name: create /root/.ssh directory
    file:
      state: directory
      path: /mnt/root/.ssh

  - name: copy root key
    copy:
      src: /root/.ssh/authorized_keys
      dest: /mnt/root/.ssh/authorized_keys
      owner: root
      group: root
      mode: 0600
      remote_src: True

  - name: copy .bash_aliases
    copy:
      src: bash_aliases
      dest: /mnt/root/.bash_aliases
      owner: root
      group: root
      mode: 0644

  - name: copy .bashrc
    copy:
      src: bashrc
      dest: /mnt/root/.bashrc
      owner: root
      group: root
      mode: 0644

  - name: copy .profile
    copy:
      src: profile
      dest: /mnt/root/.profile
      owner: root
      group: root
      mode: 0644

  - name: delete supplied keys
    file:
      state: absent
      path: "/mnt/etc/ssh/ssh_host_{{ item.algo }}_key"
    with_items: "{{ hetzner_hypervisor_ssh_host_keys }}"

  - name: delete supplied pub keys
    file:
      state: absent
      path: "/mnt/etc/ssh/ssh_host_{{ item.algo }}_key.pub"
    with_items: "{{ hetzner_hypervisor_ssh_host_keys }}"

  - name: generate (better) ssh host keys
    command: "chroot /mnt ssh-keygen -q -N '' -t {{ item.algo }} -b {{ item.keylen }} -f /etc/ssh/ssh_host_{{ item.algo }}_key"
    with_items: "{{ hetzner_hypervisor_ssh_host_keys }}"

  - name: keep old eth0 device name
    lineinfile:
      path: /mnt/etc/default/grub
      regexp: "^GRUB_CMDLINE_LINUX"
      line: 'GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0"'
      state: present
    when: ansible_distribution_release == 'stretch' or ansible_distribution_release == 'xenial'

  - name: install boot loader (grub)
    command: chroot /mnt grub-install /dev/nbd0

  - name: set up grub
    command: chroot /mnt update-grub

  - name: replace /dev/nbd0p1 with /dev/vda1
    replace:
      path: /mnt/boot/grub/grub.cfg
      regexp: 'nbd0p3'
      replace: 'vda3'

  - name: umount pseudo filesystems
    command: umount -l /mnt/{{ item }}
    with_items:
    - dev/pts
    - dev
    - proc
    - sys

  - name: unmount boot
    command: umount /dev/nbd0p2

  - name: unmount root
    command: umount /dev/nbd0p3

  - name: unconnect the qcow device
    command: "qemu-nbd -d /dev/nbd0"

  - name: creaete vm
    command: virt-install -n {{ vm.name }}
             --memory={{ vm.ram }}
             --vcpus={{ vm.cores }}
             --cpu host
             --os-type=linux
             --disk vol={{ hetzner_hypervisor_default_storage_pool }}/{{ vm.name }}.qcow2,device=disk,bus=virtio,cache=writeback,format=qcow2
             --network bridge=br0,model=virtio,mac={{ vm.mac }}
             --import
             --noautoconsole
             --autostart
             --graphics vnc,keymap=de
             --console pty,target_type=virtio

  - name: route exists?
    command: "ip route show {{ vm.ip }}"
    register: _route_exists

  - name: add route
    command: "route add -host {{ vm.ip }} dev br0"
    when: _route_exists.stdout == ""

  # Block condition create vm
  when: qcow_exists.stat.exists == False
# Block end create vm

# Block start resize vm
- block:

  # Read the memory content
  - name: Read memory value
    xml:
      path: "/etc/libvirt/qemu/{{ vm.name }}.xml"
      xpath: /domain/memory
      content: text
    register: _memory

  # Read the core content
  - name: Read vcpu value
    xml:
      path: "/etc/libvirt/qemu/{{ vm.name }}.xml"
      xpath: /domain/vcpu
      content: text
    register: _vcpu

  # Read the disk size
  - name: read current disk size
    shell: "qemu-img info /var/lib/libvirt/images/{{ vm.name }}.qcow2 | grep virtual | cut -d ' ' -f 3-3 | cut -d '.' -f 1-1"
    args:
      executable: /bin/bash
    register: _size

  - name: fail when the new size is smaller than the old size
    fail:
      msg: "The new size for {{ vm.name }} ({{ vm.size }}G) is smaller than the current size ({{ _size.stdout }}G). You can not downscale the disksize. You can only upscale the disk size!"
    when: _size.stdout|int > vm.size

  - name: register _vmupdate
    set_fact:
      _vmupdate: True
    when: _memory.matches[0].memory|int != (vm.ram * 1024) or _vcpu.matches[0].vcpu|int != vm.cores or _size.stdout|int != vm.size

  # Block start vm update
  - block:

    - name: stop vm
      command: "virsh shutdown {{ vm.name }}"

    # Block start resize memory
    - block:

      - name: update max memory
        xml:
          path: "/etc/libvirt/qemu/{{ vm.name }}.xml"
          xpath: /domain/memory
          value: "{{ vm.ram * 1024 }}"

      - name: update memory
        xml:
          path: "/etc/libvirt/qemu/{{ vm.name }}.xml"
          xpath: /domain/currentMemory
          value: "{{ vm.ram * 1024 }}"

      # Block condition resize memory
      when: _memory.matches[0].memory|int != (vm.ram * 1024)
    # Block end resize memory

    # Block start resize cores
    - block:

      - name: update vcpu
        xml:
          path: "/etc/libvirt/qemu/{{ vm.name }}.xml"
          xpath: /domain/vcpu
          value: "{{ vm.cores }}"

      # Block condition resize cores
      when: _vcpu.matches[0].vcpu|int != vm.cores
    # Block end resize cores

    # reload xml
    - name: reload xml
      command: "virsh define /etc/libvirt/qemu/{{ vm.name }}.xml"
      when: _memory.matches[0].memory|int != (vm.ram * 1024) or _vcpu.matches[0].vcpu|int != vm.cores

    # Block start resize disk
    - block:

      - name: additional disk space
        set_fact:
          _size_diff: "{{ vm.size - _size.stdout|int }}"

      - name: resize disk
        command: "qemu-img resize {{ hetzner_hypervisor_vms_path }}{{ vm.name }}.qcow2 +{{ _size_diff }}G"

      - name: connect the qcow device
        command: "qemu-nbd -c /dev/nbd0 {{ hetzner_hypervisor_vms_path }}{{ vm.name }}.qcow2"

      - name: Fix qcow2 disk
        command: sgdisk -e /dev/nbd0

      - name:
        shell: "parted /dev/nbd0 --script print free | grep 'Disk /dev/nbd0' | cut -d ' ' -f 3-3"
        args:
          executable: /bin/bash
        register: _resize

      - name: resize the partition
        command: "parted /dev/nbd0 --script resizepart 3 {{ _resize.stdout }}"

      - name: mount xfs
        command: mount /dev/nbd0p3 /mnt/

      - name: grow xfs
        command: xfs_growfs /mnt/

      - name: unmount xfs
        command: umount /mnt

      - name: disconnect
        command: qemu-nbd --disconnect /dev/nbd0

      # Block condition resize disk
      when: _size.stdout|int != vm.size
    # Block end resize disk

    - name: start vm
      command: "virsh start {{ vm.name }}"

    # Block condition vm update
    when: _vmupdate is defined and _vmupdate == True
  # Block end vm update

  # Block condition resize vm
  when: qcow_exists.stat.exists == True
# Block end resize vm
...
